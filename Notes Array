*1
Optimization problem:
An optimization problem is the problem of finding the best solution from all feasible solutions
It can be usually solved by DP(Dynamic Programming)


*2
Dynamic Programming 
Dynamic Programming is an algorithmic paradigm that solves a given complex problem by 
****breaking it into subproblems and stores the results of subproblems****
to avoid computing the same results again.

****Overlapped Subproblems*****
Pick up a common case first. As we know, the later subproblem is based on the former one. So you assume that the former subproblem is already solved, and then you come up with a formula where you can solve current problem by using the result from former result(s)


*3
Search: 
Unbalanced binary search
Balanced binary search tree: AVL, RBT, 2-3tree
Hash table
Sort



*4
How to iterate a HashMap:

        Map.Entry<Integer, Integer> majorityEntry = null;
        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {
            if (majorityEntry == null || entry.getValue() > majorityEntry.getValue()) {
                majorityEntry = entry;
            }
        }



hashMap.entrySet()
Map.Entry<Integer, Integer> 



Map.Entry is a key and its value combined into one class. This allows you to iterate over Map.entrySet() instead of having to iterate over Map.keySet(), then getting the value for each key. A better way to write what you have is:

for (Map.Entry<String, JButton> entry : listbouton.entrySet())
{
  String key = entry.getKey();
  JButton value = entry.getValue();

  this.add(value);
}


*5
Arrays.sort(nums);
O(NlogN)





*6
HashSet:
HashSet h = new HashSet(); 

Important Methods in HashSet:

boolean add(E e) : add the specified element if it is not present, if it is present then return false.
void clear() : removes all the elements from set.
boolean contains(Object o) : return true if element is present in set.
boolean remove(Object o) : remove the element if it is present in set.
Iterator iterator() : return an iterator over the element in the set.


Time Complexity:
add: O(1)
Contains: O(1)
Underlying Data Structure: Hash Table


*****
HashSet does not allow duplicate values
*****



*7
Queue<Integer> q = new LinkedList<>();

Add()-Adds an element at the tail of queue. More specifically, at the last of linkedlist if it is used, or according to the priority in case of priority queue implementation.

peek()-To view the head of queue without removing it. Returns null if queue is empty.
element()-Similar to peek(). Throws NoSuchElementException if queue is empty.

remove()-Removes and returns the head of the queue. Throws NoSuchElementException when queue is impty.

poll()-Removes and returns the head of the queue. Returns null if queue is empty.




*8
Stack<Integer> stack = new Stack<Integer>();

1. Object push(Object element) : Pushes an element on the top of the stack.

2. Object pop() : Removes and returns the top element of the stack. An ‘EmptyStackException’ exception is thrown if we call pop() when the invoking stack is empty.

3. Object peek( ) : Returns the element on the top of the stack, but does not remove it.

4. boolean empty() : It returns true if nothing is on the top of the stack. Else, returns false.

5. int search(Object element) : It determines whether an object exists in the stack. If the element is found, it returns the position of the element from the top of the stack. Else, it returns -1.




*9
String str;
str.length();
str.charAt(index);




*10
Integer.MIN_VALUE;
Integer.MAX_VALUE;




*11
Window Sliding Technique:
This technique shows how a nested for loop in few problems can be converted to single for loop and hence reducing the time complexity.
EX. 643. Maximum Average Subarray I
The brute force: time complexity is O(k*n) as it contains two nested loops.
Window Sliding: Time Complexity is O(n).




*12
java.util.HashMap getOrDefault()
public V getOrDefault(Object key,V defaultValue)
Method Returns
The getOrDefault() method returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.
EX. hashMap.getOrDefault(key, 0)



*13
java.util.HashMap.values() Method -----------get all values
public Collection<V> values()
The values() method is used to return a Collection view of the values contained in this map.


*14
java.util.HashMap.keySet() Method------------get all keys
public Set<K> keySet()
The keySet() method is used to get a Set view of the keys contained in this map.

Actually, we can use 
for (int x: hashMap.keySet()) 
To traverse the HashMap. However, if we just want to get the highest value, we can just use 
Collections.max(hashMap.values());


*15
Collections.max()
With the help of HashMap and Collections.max(), find the max number of the duplicate in an array is pretty easy. HashMap count; Collections.max(count.values())



*16
Java Collection simply means a single unit of objects. Java Collection framework provides many interfaces (Set, List, Queue, Deque etc.) and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet etc).

java.util.Collections.sort() method 
It is present in java.util.Collections class. It is used to sort the elements present in the specified list of Collection in ascending order.
It works similar to java.util.Arrays.sort() method but it is better then as it can sort the elements of Array as well as linked list, queue and many more present in it.



*17
We can use HashMap when we want to detect the difference of groupa of elements which have one same property. (Ex. 766. Toeplitz Matrix). Detect the non-duplicate!




*18
Traversal/Iteration of an ArrayList
Advance for loop:
for(Integer i : arrayList){}




*19
    int maxDepth(Node node) 
    {
        if (node == null)
            return 0;
        else
        {
            /* compute the depth of each subtree */
            int lDepth = maxDepth(node.left);
            int rDepth = maxDepth(node.right);
  
            /* use the larger one */
            if (lDepth > rDepth)
                return (lDepth + 1);
             else
                return (rDepth + 1);
        }
    }



*20
System.exit(0)



*21
""+Integer/Boolean = String






*22
If you don't have any idea, try to use brute force, and then find out whether there are some places to optimize the algorithm.






*23
HashMap and HashSet are pretty useful for detecting duplicates.




*24
We cans use PriorityQueue to find Second/Third/Fourth...  Maximum Number in a array.
ex. 414. Third Maximum Number

*****
Java default PriorityQueue is MIN priority queue!!!
However, we can actually convert it to MAX priority queue.
PriorityQueue<Integer> maxPQ = new PriorityQueue<Integer>(20,Collections.reverseOrder());
*****

priorityQueue.contains(...); return boolean



*25
Difference between peek, poll and remove method of Queue Interface:
poll() and remove() is used to remove the peek element or head of queue. The difference comes when queue is empty. If queue is empty and we do poll() operation then it returns null while remove() will throw the NoSuchElementException.





*26
HashSet Iteration:

     // Create a HashSet
     Set<String> hset = new HashSet<String>();
     //     
     for (String temp : hset) {
     System.out.println(temp);
     }



*27
When we dealing with subarray of an array and want to traverse the array from left to right to solve the problem, we probably can use DP to optimize the solution.
Ex. 413. Arithmetic Slices
