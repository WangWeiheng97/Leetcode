*1
Reverse an integer:

        while(x!=0){
            int tail = x%10;
            int newResult = result*10 + tail;
            result =  newResult;
            x = x/10;
        }



*2
If we need to get specific digit in a integer, it's really convenient to convert it to String and then convert the String to charArray. In this way, we ca access to the digit we want.

String.valueOf(int number).  convert something to String
char c[]=s.toCharArray();    String to Char Array
string.charAt(i) - '0'.     Quick way to convert char to int:




*3
Find max or min value in an array of primitives using Java:

To get the minimum or maximum value from the array we can use the Collections.min() and Collections.max() methods.
But as this method requires a list type of data we need to convert the array to list first using above explained “asList()” function.
Example:
int max = Collections.max(Arrays.asList(num));




*4
If we want to do something with the the digit of a number, we need to convert the int to String then to char[], then we can continue use it.




*5
i*i = Math.pow(i, 2);



*6
This is a math problem：
1 = 1
4 = 1 + 3
9 = 1 + 3 + 5
16 = 1 + 3 + 5 + 7
25 = 1 + 3 + 5 + 7 + 9
36 = 1 + 3 + 5 + 7 + 9 + 11
…
so 1+3+…+(2n-1) = (2n-1 + 1)n/2 = nn




*7
To solve int overflow problem, we can convert int(-2^31 to 2^31-1) to long(-2^63 to 2^63-1)

Always keep in mind the int overflow when do math problem.



*8
When speaking of factor of a integer, we can use sqrt() to optimize reduce the time complexity.
EX. 507. Perfect Number



*9
Before we really implement a algorithm, we need to think about this problem really deep. Since sometimes the math problem can be really tricky, if we can find a the tricky part of the problem and simplify the problem, then we don't have to implement a really complicate method can waste our time.



*10
double Math.sqrt(number);

(int)Math.sqrt(num) 
Don't forget add (int)!!!



*11
double b =....
if(b==(int)b)return true;
It's a really great way to verify whether b is a int we want.
ex. 633. Sum of Square Numbers





*12
    // Function to check if a number is prime or not.
    public boolean isPrime(int n)
    {
        // Corner cases
        if (n <= 1)
            return false;
        if (n <= 3)
            return true;
        if (n%2==0)
            return false;

        // only odd factors need to be tested up to n^0.5
        for(int i = 3; i * i <= n; i += 2)
            if (n % i == 0) 
                  return false;

        return true;
 
    }


//For-loop must begin at 3!!!!!!!!!!!



*13
Find a single number in an array where other numbers are all paired.
Bit Manipulation:
Concept

If we take XOR of zero and some bit, it will return that bit
a ^ 0 = a
If we take XOR of two same bits, it will return 0
a ^ a = 0
a^b^a = 0^b = b
So we can XOR all bits together to find the unique number.


